                  key and value

val rdd = sc.parallelize(List((1, 2), (8, 4), (3, 6),(3, 6)))

#reduceByKey(func) :Combine values with the same key.

rdd.reduceByKey( (x, y) => x + y).collect()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~```
#groupByKey() :Group values with the same key.

rdd.groupByKey().collect()

# mapValues(func) :Apply a function to each value of a pair RDD without changing the key.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``
rdd.mapValues(x => x+1).collect()
rdd.mapValues(x => x+1).collect().drop(2)

# keys() :Return an RDD of just the keys.
rdd.keys.collect()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# values() :Return an RDD of just the values.

rdd.values.collect()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# sortByKey() :Return an RDD sorted by the key.

rdd.sortByKey().collect()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Transformations on two pair RDDs 

val rdd1 = sc.parallelize(List((1,2),(5,4),(3,6)))
val rdd2 = sc.parallelize(List((3,9)))

# subtractByKey :Remove elements with a key present in the other RDD.

rdd1.subtractByKey(rdd2).collect()

rdd1.join(rdd2).collect()

@ Array[(Int, (Int, Int))] = Array((3,(6,9)))

# rightOuterJoin :Perform a join between two RDDs where the key must be present in the other RDD.

rdd1.rightOuterJoin(rdd2).collect()
@ Array[(Int, (Int, Int))] = Array((3,(6,9)))

leftOuterJoin :Perform a join between two RDDs where the key must be present in the first RDD.

rdd1.leftOuterJoin(rdd2).collect()

@ Array[(Int, (Int, Option[Int]))] = Array((1,(2,None)), (3,(6,Some(9))), (5,(4,None)))


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

               Actions Available on Pair RDDs

val rdd = sc.parallelize(List((1, 2), (3, 4), (3, 6)))

# countByKey() :Count the number of elements for each key.

rdd.countByKey()
@ scala.collection.Map[Int,Long] = Map(1 -> 1, 3 -> 2)


# collectAsMap():Collect the result as a map to provide easy lookup

rdd.collectAsMap()
@ scala.collection.Map[Int,Int] = Map(1 -> 2, 3 -> 6)


# lookup(key) :Return all values associated with the provided key.
rdd.lookup(3)
@  Seq[Int] = WrappedArray(4, 6)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Examples 
    Sales.csv

John,iPhone Cover,9.99
John,Headphones,5.49
Jack,iPhone Cover,9.99
Jill,Samsung Galaxy Cover,8.95
Bob,iPad Cover,5.49

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Code
val data = sc.textFile("/home/user/Desktop/hero").map(line => line.split(",")).map(purchaseRecord => (purchaseRecord(0), purchaseRecord(1), purchaseRecord(2)))
// let's count the number of purchases
val numPurchases = data.count()

// let's count how many unique users made purchases
val uniqueUsers = data.map{ case (user, product, price) => user }.distinct().count()
    // let's sum up our total revenue
val totalRevenue = data.map{ case (user, product, price) => price.toDouble }.sum()
    // let's find our most popular product
val productsByPopularity = data.map{ case (user, product, price) => (product, 1) }.reduceByKey(_ + _).collect().sortBy(-_._2)    
val mostPopular = productsByPopularity(0)
println("Total purchases: " + numPurchases)
println("Unique users: " + uniqueUsers)
println("Total revenue: " + totalRevenue)
println("Most popular product: %s with %d purchases".format(mostPopular._1, mostPopular._2))

